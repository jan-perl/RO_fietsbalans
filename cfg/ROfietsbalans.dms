//todo
//cleanup

// buurprovincies ??
// oppervlak vs arbeidsplaatsen

container ROfietsbalans
{
    #include <Classifications.dms> 
    #include <Units.dms> 
	
		container config1 // Define configuration
	{
		unit<bool> alleen_Utrecht := True;

		#include<ngr_layer.dms>                                                                 // Tiles for background layer
	}

	container Geography // Define the extend of the scene and the projection 
	{
		unit<fpoint> rdc_base   : format = "EPSG:28992", DialogData = "ngr_layer";               // Rijksdriehoekstelsel, a 2D cartesian coordinate system for the netherlands
		unit<fpoint> rdc_meter  := range(rdc_base, point(0f, 300000f), point(280000f, 625000f)); // Define a 2D range consisting of 2D cartesian coordinates, later used for the "province" domain unit geometry attribute
		unit<fpoint> rdc        := Geography/rdc_meter;

		#include<ngr_layer.dms>                                                                 // Tiles for background layer
	}

    container NLgrid_t1
	{
		unit<fpoint> rdc_meter: Range = "[{300000, 0}, {625000, 280000})"; 

		parameter<rdc_meter> TopLeftCoord :=  point(float32(625000), float32(10000), rdc_meter);

		parameter<int16> nrofrows  := int16(3250);
		parameter<int16> nrofcols := int16(2700);

		unit<spoint> rdc_100m
		:=  range(
			  gridset(
				 Geography/rdc
				,point(float32(-100), float32(100), rdc_meter)
				,TopLeftCoord
				,spoint
			  )
			  ,point(int16(0), int16(0))
			  ,point(nrofrows, nrofcols)
		   )
		,  Descr = "rdCoords/100m van NW naar SE (3250 rows, 2700 cols)" ;
	}
	
    container NLgrid_import
	{
		unit <wpoint> rdc_100m := Geography/rdc_grids/km1;
	}

    container NLgrid_t2
	{
		//unit<fpoint> rdc_meter: Range = "[{300000, 0}, {625000, 280000})"; 

		parameter<Geography/rdc> TopLeftCoord :=  point(float32(625000), float32(10000), Geography/rdc);

		parameter<int16> nrofrows  := int16(3250);
		parameter<int16> nrofcols := int16(2700);

		unit<spoint> rdc_100m
		:=  range(
			  gridset(
				 Geography/rdc
				,point(float32(-100), float32(100), Geography/rdc)
				,TopLeftCoord
				,spoint
			  )
			  ,point(int16(0), int16(0))
			  ,point(nrofrows, nrofcols)
		   )
		,  Descr = "rdCoords/100m van NW naar SE (3250 rows, 2700 cols)";
	}

	// code for ConfigPointColRow=1
	container NLgrid
	{
		unit<wpoint> rdc_100m :=
			range(
				  gridset(Geography/rdc_meter, point( 100.0, -100.0), point(10000.0,625000.0), wpoint)
				, point(0w, 0w)
				, point(3250w, 3500w)
			)
			,	Descr = "rdCoords/100m van NW naar SE (2700 cols)"
		{
		}
	}
	
	container NLgrid_noswap
	{
		unit<wpoint> rdc_100m :=
			range(
				  gridset(Geography/rdc_meter, point( -100.0, 100.0), point(625000.0,10000.0), wpoint)
				, point(0w, 0w)
				, point(3500w, 3500w)
			)
			,	Descr = "rdCoords/100m van NW naar SE (2700 cols)"
		{
		}
	}

    #include <SourceData.dms> 

	container Results: Using = "Units"
	{
		container inbuurt1
		{	  
		    // attribute<Int32>  CurrConfigPointColRow  := ConfigSettings/ConfigPointColRow ;
            attribute<fpoint>  ctr           (SourceData/gem2) := centroid(SourceData/gem2/geometry); 
            attribute<m2>      area_geo      (SourceData/gem2) := float64(area(SourceData/gem2/geometry, float32(m2))); 
            attribute<m2>      area_geo_diff (SourceData/gem2) := float64(SourceData/gem2/Shape_Area) - area_geo ;

			//FSI_22	Berekende Floor Space Index in 2022 ( FSI_22 = opp_bruto_22/Shape_Area )
			//GSI_22	Berekende Ground Space Index in 2022 ( GSI_22 = pand_opp_bgt_22/Shape_Area )
			//OSR_22	Berekende Open Space Ratio in 2022 ( OSR_22 = (1-GSI_22)/FSI_22 )
			//L_22	Berekend gemiddeld aantal bouwlagen in 2022 ( L_22 = opp_bruto_22 / pand_opp_22 ) 
			//MXI_22	Berekende Mixed Use Index in 2022 ( MXI_22 = (bvo_woon_22+bvo_logies_22)/(opp_bruto_22-(bvo_overige_22+opp_schuurtje_22)) )

			attribute<ratio>    C_FSI22       (SourceData/gem2)  := float64(SourceData/gem2/bruto_22) / float64(SourceData/gem2/Shape_Area);
			attribute<ratio>    C_FSI22diff   (SourceData/gem2)  := float64(SourceData/gem2/FSI_22) - C_FSI22;
		
			attribute<ratio>    GSI22B        (SourceData/gem2)  := float64(SourceData/gem2/pand_opp22) / float64(SourceData/gem2/Shape_Area);
			attribute<ratio>    GSI22Bdiff    (SourceData/gem2)  := float64(SourceData/gem2/GSI_22) - GSI22B;

			attribute<m2>       O_MXI22T       (SourceData/gem2)  := ((SourceData/gem2/bvo_woo_22 + SourceData/gem2/bvo_log_22) [m2] );			            
			attribute<m2>       O_MXI22N       (SourceData/gem2)  := (( SourceData/gem2/bruto_22 - (SourceData/gem2/bvo_ove_22 + SourceData/gem2/opp_sch_22))[m2]);
			attribute<ratio>    R_MXI22T       (SourceData/gem2)  := O_MXI22T / area_geo  ;			            
			attribute<ratio>    R_MXI22N       (SourceData/gem2)  := O_MXI22N /  area_geo  ;
            parameter<ratio>    AVG_MXI22                         := float64(sum(O_MXI22T) / sum(O_MXI22N));
			attribute<ratio>    C_MXI22        (SourceData/gem2)  := float64(O_MXI22T / O_MXI22N );
			attribute<ratio>    C_MXI22diff    (SourceData/gem2)  := float64(SourceData/gem2/MXI_22) - C_MXI22;
			
			unit<uint32> Prov := unique(SourceData/gem2/PV_NAAM)
			{
				attribute<uint32>  Prov_rel   (SourceData/gem2) := rlookup(SourceData/gem2/PV_NAAM, Prov/Values);
				attribute<m2>      PV_MXI22T  (Prov)            := sum(O_MXI22T,Prov_rel) ;
				attribute<m2>      PV_MXI22N  (Prov)            := sum(O_MXI22N,Prov_rel) ;
				attribute<ratio>   PV_MXI22   (Prov)            := float64(PV_MXI22T / PV_MXI22N );                              			 
            }
        }		

		container kernelfiets
		{
		   unit<uint32> Dist2Range;
		   unit<spoint> pot50km := range(spoint, point(-100s, -100s), point(101s, 101s))
			{
			  attribute<Dist2Range> distMatr  := dist2(point(0s, 0s, .), Dist2Range);
			  //attribute<float32>    AbsWeight := distMatr <= 2500 ? 1f : 0f;
			  //attribute<float32>    AbsWeight := exp(- float32(distMatr) / 2500.0f );
			  parameter<m>       maxfietsdist := 5000 [m];
			  parameter<m>       gridstep     := 100[m];
			  parameter<ratio>   gaussdenom   := (maxfietsdist / gridstep / 2.0) * (maxfietsdist / gridstep / 2.0);
			  attribute<float32> AbsWeight1   := exp(- float32(distMatr) / float32(gaussdenom)) ;
			  attribute<float32> AbsWeight    := AbsWeight1 / sum(AbsWeight1) ;
		   }
		}
		
		container kernelauto
		{
		   unit<uint32> Dist2Range;
		   unit<spoint> pot50km := range(spoint, point(-500s, -500s), point(501s, 501s))
			{
			  attribute<Dist2Range> distMatr  := dist2(point(0s, 0s, .), Dist2Range);
			  //attribute<float32>    AbsWeight := distMatr <= 2500 ? 1f : 0f;
			  //attribute<float32>    AbsWeight := exp(- float32(distMatr) / 2500.0f );
			  parameter<m>       maxfietsdist := 25000 [m];
			  parameter<m>       gridstep     := 100[m];
			  parameter<ratio>   gaussdenom   := (maxfietsdist / gridstep / 2.0) * (maxfietsdist / gridstep / 2.0);
			  attribute<float32> AbsWeight1   := exp(- float32(distMatr) / float32(gaussdenom)) ;
			  attribute<float32> AbsWeight    := AbsWeight1 / sum(AbsWeight1) ;
		   }
		}
		
		
		container ingrid
		{
			attribute<UInt32> gconv       (NLgrid/rdc_100m) := poly2grid(SourceData/gem2/geometry[Geography/rdc_meter], NLgrid/rdc_100m); 
			attribute<bool>   HeeftBuurt  (NLgrid/rdc_100m) := IsDefined(gconv);
			attribute<ratio>  test        (NLgrid/rdc_100m) := float64(rnd_uniform(0, NLgrid/rdc_100m, range(float32, 0f, 1f)));

			attribute<ratio>  G_MXI22T    (NLgrid/rdc_100m) := Results/inbuurt1/R_MXI22T[gconv];
			attribute<ratio>  G_MXI22N    (NLgrid/rdc_100m) := Results/inbuurt1/R_MXI22N[gconv];
			attribute<ratio>  G1_MXI22    (NLgrid/rdc_100m) := Results/inbuurt1/C_MXI22[gconv];
			attribute<ratio>  G2_MXI22    (NLgrid/rdc_100m) := G_MXI22T / G_MXI22N;
			attribute<ratio>  D_MXI22     (NLgrid/rdc_100m) := G1_MXI22 - G2_MXI22;
			 
//           attribute<m2>      G_MXI22T  (NLgrid/rdc_100m) := (rnd_uniform(0, NLgrid/rdc_100m, range(float32, 0f, 1f)))[m2];
		  
			parameter<m2>  max_gmxI22T := max(G_MXI22T);
			parameter<m2>  max_omxI22T := max(Results/inbuurt1/O_MXI22T);
        } 
		
				container smoothgridfiets
		{		
            attribute<ratio> S_MXI22T  (NLgrid/rdc_100m) := float64(potential( float32(Results/ingrid/G_MXI22T),
			              float32(kernelfiets/pot50km/AbsWeight)));
            attribute<ratio> S_MXI22N  (NLgrid/rdc_100m) := float64(potential( float32(Results/ingrid/G_MXI22N),
			              float32(kernelfiets/pot50km/AbsWeight)));						  
			attribute<ratio> S_MXI22   (NLgrid/rdc_100m) :=  iif(S_MXI22N > 0.05, S_MXI22T / S_MXI22N, 1.0/0.0);
        } 	
		
			  unit<uint32> fietswijk1  := SourceData/gem2
	       ,    StorageName = "%ProjDir%/output/fietswijk1.dbf"  
	    {
		      attribute<Geography/rdc > geometry (poly) :=SourceData/gem2/geometry,    StorageName = "%ProjDir%/output/fietswijk1.shp" ;
			  attribute<string> label  :=SourceData/gem2/label;
			  attribute<string> BU_CODE  :=SourceData/gem2/BU_CODE;
			  attribute<string> BU_NAAM  :=SourceData/gem2/BU_NAAM;
//			  attribute<float64> GEM2021NR :=SourceData/gem2/GEM2021NR;
			  attribute<string> GM_CODE  :=SourceData/gem2/GM_CODE;
			  attribute<string> GM_NAAM  :=SourceData/gem2/GM_NAAM;
			  attribute<string> PV_CODE  :=SourceData/gem2/PV_CODE;
			  attribute<string> PV_NAAM  :=SourceData/gem2/PV_NAAM;
		      attribute<ratio> S_MXI22_b  :=mean(smoothgridfiets/S_MXI22,ingrid/gconv) ;
		}
		
						container smoothgridauto
		{		
            attribute<ratio> S_MXI22T  (NLgrid/rdc_100m) := float64(potential( float32(Results/ingrid/G_MXI22T),
			              float32(kernelauto/pot50km/AbsWeight)));
            attribute<ratio> S_MXI22N  (NLgrid/rdc_100m) := float64(potential( float32(Results/ingrid/G_MXI22N),
			              float32(kernelauto/pot50km/AbsWeight)));						  
			attribute<ratio> S_MXI22   (NLgrid/rdc_100m) :=  iif(S_MXI22N > 0.02, S_MXI22T / S_MXI22N, 1.0/0.0);
        } 
        		
	}
}